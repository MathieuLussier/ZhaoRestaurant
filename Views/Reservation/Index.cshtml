@model IEnumerable<tp1_restaurant.Models.Reservation>
@using Microsoft.AspNetCore.Authorization
@inject IAuthorizationService AuthorizationService

@{
	ViewData["Title"] = "Reservation";
}

<div class="section" data-aos="fade-up">
	<div class="container-fluid" style="padding: 5rem;">
		<div class="row section-heading justify-content-center mb-5">
			<div class="col-md-8 text-center">
				<h2 class="heading mb-3">Liste des reservations</h2>
			</div>
		</div>
		<div class="row">

			<div>
				<a asp-action="Create" asp-controller="Reservation">Créer une reservation</a>
			</div>
			@if ((await AuthorizationService.AuthorizeAsync(User, "AdminOnly")).Succeeded)
			{
				<div>
					<form asp-action="Index" asp-controller="Reservation" id="TypeActiveForm" method="get">
						<select name="TypeActive" class="form-control" onchange="submitTypeActiveForm();" id="TypeActiveSel">
							<option value="0" selected="selected">Tous</option>
							<option value="1">Non-confirmée</option>
							<option value="2">Confirmée</option>
						</select>
					</form>
				</div>
				@section Scripts
{
					<script>

						(function () {
							const urlParams = new URLSearchParams(window.location.search);
							const typeActive = urlParams.get('TypeActive');
							let typeActiveSel = document.getElementById('TypeActiveSel');
							const options = typeActiveSel.options;
							for (let opt, i = 0; opt = options[i]; i++) {
								if (opt.value == typeActive) {
									typeActiveSel.selectedIndex  = i;
									break;
								}
							}
						})();

						function submitTypeActiveForm() {
							document.getElementById('TypeActiveForm').submit();
						}
					</script>
				}
			}

			<div class="table-responsive">
				<table class="table table-hover">
					<thead>
						<tr>
							<th scope="col">#</th>
							<th scope="col">
								@Html.DisplayNameFor(model => model.Prenom)
							</th>
							<th scope="col">
								@Html.DisplayNameFor(model => model.Nom)
							</th>
							<th scope="col">
								@Html.DisplayNameFor(model => model.TypeReservation)
							</th>
							<th scope="col">
								@Html.DisplayNameFor(model => model.Courriel)
							</th>
							<th scope="col">
								@Html.DisplayNameFor(model => model.DateHeureReservation)
							</th>
							<th scope="col">
								@Html.DisplayNameFor(model => model.NumeroTelephone)
							</th>
							<th scope="col">
								@Html.DisplayNameFor(model => model.NombrePersonnes)
							</th>
							@if ((await AuthorizationService.AuthorizeAsync(User, "AdminOnly")).Succeeded)
							{
								<th scope="col">
									@Html.DisplayNameFor(model => model.active)
								</th>
							}
							<th></th>
						</tr>
					</thead>
					<tbody>
						@foreach (var item in Model)
						{
							<tr>
								<td scope="row">
									@Html.DisplayFor(modelItem => item.ReservationId)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.Prenom)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.Nom)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.TypeReservation)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.Courriel)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.DateHeureReservation)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.NumeroTelephone)
								</td>
								<td>
									@Html.DisplayFor(modelItem => item.NombrePersonnes)
								</td>
								@if ((await AuthorizationService.AuthorizeAsync(User, "AdminOnly")).Succeeded)
								{
									<td>
										@Html.DisplayFor(modelItem => item.active)
									</td>
								}
								<td>
									@Html.ActionLink("Modifier", "Edit", new { id = item.ReservationId }) |
									@Html.ActionLink("Détails", "Details", new { id = item.ReservationId }) |
									@Html.ActionLink("Supprimer", "Delete", new { id = item.ReservationId })
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
</div> <!-- .section -->
